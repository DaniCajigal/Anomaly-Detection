# -*- coding: utf-8 -*-
"""anomaly-detection-tflite-conversion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qDTITDN_-4H1brKe5QUhfseafcJUaE-t

TensorFlow Lite Conversion
---
Convert the full Keras model into a smaller TensorFlow Lite model file. Then, read in the raw hex bytes from the model file and write them to a separate C header file as an array.
"""

!python -m pip install matplotlib
!python -m pip install pandas
!python -m pip install scikit-learn
!python -m pip install tensorflow==2.1.0
!python -m pip install keras
!python -m pip install numpy==1.18.1
!python -m pip install scipy==1.8.1

from os.path import join
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import models
from scipy import stats
import c_writer

import sys
import keras
print('Python', sys.version)
print('Numpy', np.__version__)
print('TensorFlow', tf.__version__)
print('Keras', keras.__version__)

# Settings
keras_model_name = 'autoencoder'           # Will be given .h5 suffix
tflite_model_name = 'autoencoder'          # Will be given .tflite suffix
c_model_name = 'autoencoder'               # Will be given .h suffix1
# Load model
model = models.load_model(keras_model_name + '.h5')
# Convert Keras model to a tflite model
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()
open(tflite_model_name + '.tflite', 'wb').write(tflite_model)
# Construct header file
hex_array = [format(val, '#04x') for val in tflite_model]
c_model = c_writer.create_array(np.array(hex_array), 'unsigned char', c_model_name)
header_str = c_writer.create_header(c_model, c_model_name)
# Save C header file
with open(c_model_name + '.h', 'w') as file:
    file.write(header_str)

"""Test Inference
---
Get known good values from the model for normal and anomaly samples to compare against C++ implementation.
"""

# Saved Numpy test samples file location
sample_file_name = 'normal_anomaly_samples'  # Will be given .npz suffix

sensor_sample_rate = 200    # Hz
sample_time = 0.64           # Time (sec) length of each sample
max_measurements = int(sample_time * sensor_sample_rate)

# Load test samples
with np.load(sample_file_name + '.npz') as data:
    normal_sample = data['normal_sample']
    anomaly_sample = data['anomaly_sample']
print(normal_sample.shape)
print(anomaly_sample.shape)
print(normal_sample[:5])

# Test extracting features (median absolute deviation) using SciPy
import numpy as np

def manual_mad(sample):
    median = np.median(sample, axis=0)
    mad = np.median(np.abs(sample - median), axis=0)
    return mad

# Truncate to max_measurements (assuming max_measurements is defined)
sample = normal_sample[:max_measurements]
normal_x = manual_mad(sample)  # Calculate MAD manually

sample = anomaly_sample[:max_measurements]
anomaly_x = manual_mad(sample)

print("Normal MAD:", normal_x)
print("Anomaly MAD:", anomaly_x)

# Perform inference and find MSE with normal sample
input_tensor = normal_x.reshape(1, -1)
pred = model.predict(input_tensor)
mse = np.mean(np.power(normal_x - pred, 2), axis=1)
print("Prediction:", pred)
print("MSE:", *mse)

# Perform inference and find MSE with anomaly sample
input_tensor = anomaly_x.reshape(1, -1)
pred = model.predict(input_tensor)
mse = np.mean(np.power(anomaly_x - pred, 2), axis=1)
print("Prediction:", pred)
print("MSE:", *mse)

